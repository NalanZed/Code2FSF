public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons - n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}
==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons - n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons - n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons - n >= 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons - n >= 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons + n - 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n + 10) * 5 - 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 + 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 + 7 * 4 - 3 * 1 : (tons - n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n > 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons + n >= 3 ? (tons - n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons + n - 3) * 4 - 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 + 3 * 1 : (tons - n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant3.java:8: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons + n) * 1));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant3 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons > 10 ? (tons - 10) * 5 + 7 * 4 + 3 * 1 : (tons > 3 ? (tons - 3) * 4 + 3 * 1 : tons * 1));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee == (tons + n > 10 ? (tons - n - 10) * 5 - 7 * 4 + 3 * 1 : (tons - n > 3 ? (tons - n + 3) * 4 - 3 * 1 : (tons - n) * 1));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 1;
            }
            n--;
        }
        return fee;
    }
}

==============================
