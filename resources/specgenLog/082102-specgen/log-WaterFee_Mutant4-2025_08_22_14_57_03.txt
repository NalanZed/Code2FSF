public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}
==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons - 1 <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons - 1 <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons < 0 ? 0 : (tons <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons < 0 ? 0 : (tons <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons <= 3 ? 3 * tons : (tons - 1 <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons < 0 ? 0 : (tons <= 3 ? 3 * tons : (tons - 1 <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n < 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n <= 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons < 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons < 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons - 1 <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons < 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons - 1 <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons - 1 <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons - 1 <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons - 1 <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons - 1 <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons <= 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons <= 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons <= 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons <= 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons <= 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons - 1 <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons <= 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons - 1 <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n < 3 ? 3 * (tons - n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n <= 3 ? 3 * (tons - n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n - 1 <= 0 ? 0 : (tons - n - 1 <= 3 ? 3 * (tons - n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons + n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons + n) : (tons - n - 1 <= 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons - 1 <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons < 3 ? 3 * tons : (tons - 1 <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons - 1 <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons <= 3 ? 3 * tons : (tons - 1 <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons - 1 <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:20:
    //@ ensures \result == (tons - 1 <= 0 ? 0 : (tons - 1 <= 3 ? 3 * tons : (tons - 1 <= 10 ? 3 * 3 + 4 * (tons - 3) : 3 * 3 + 4 * 7 + 5 * (tons - 10))));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 + 4 * (tons - n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons + n - 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n + 3) : 3 * 3 - 4 * 7 - 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 + 5 * (tons - n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons + n - 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant4.java:7: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n + 10))));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant4 {
    //@ requires tons >= 0;
    //@ ensures \result == (tons < 0 ? 0 : (tons < 3 ? 3 * tons : (tons < 10 ? 3 * 3 + 4 * (tons + 3) : 3 * 3 + 4 * 7 + 5 * (tons + 10))));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining fee == (tons + n < 0 ? 0 : (tons + n < 3 ? 3 * (tons - n) : (tons + n < 10 ? 3 * 3 - 4 * (tons - n - 3) : 3 * 3 + 4 * 7 - 5 * (tons - n - 10))));  
        //@ maintaining n >= 0 && n <= tons;
        //@ decreases n;
        while (n > 0) {
            if (n < 3) {
                fee += 3;
            } else if (n < 10) {
                fee += 4;
            } else {
                fee += 5;
            }
            n--;
        }
        return fee;
    }
}

==============================
