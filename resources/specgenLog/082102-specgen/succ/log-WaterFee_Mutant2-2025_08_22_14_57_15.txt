public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}
==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons + n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons >= 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons >= 3 ? 4*(tons-3) + 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons >= 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons >= 3 ? 4*(tons-3) + 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons >= 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons >= 3 ? 4*(tons-3) - 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons >= 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons >= 3 ? 4*(tons-3) + 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons >= 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons > 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons >= 3 ? 4*(tons-3) - 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons >= 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons >= 3 ? 4*(tons-3) + 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons >= 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons >= 3 ? 4*(tons-3) - 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n > 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons >= 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons >= 3 ? 4*(tons-3) + 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons >= 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons > 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons >= 3 ? 4*(tons-3) - 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons >= 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 + 3*3 : (tons >= 3 ? 4*(tons-3) - 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) + 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons >= 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons >= 3 ? 4*(tons-3) + 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons >= 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) + 4*7 - 3*3 : (tons >= 3 ? 4*(tons-3) - 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 + 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons + n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons >= 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons >= 3 ? 4*(tons-3) + 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons >= 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 + 3*3 : (tons >= 3 ? 4*(tons-3) - 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n > 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) + 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:10: verify: The prover cannot establish an assertion (LoopInvariant) in method calcWaterFee
        //@ maintaining fee == (tons - n >= 10 ? 5*(tons-n-10) - 4*7 - 3*3 : (tons - n >= 3 ? 4*(tons-n-3) - 3*3 : 3*(tons-n)));  
            ^
1 verification failure

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
 
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) + 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
 
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons > 3 ? 4*(tons-3) - 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons >= 3 ? 4*(tons-3) + 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
 
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons >= 3 ? 4*(tons-3) + 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons >= 3 ? 4*(tons-3) - 3*3 : 3*tons));  
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
 
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4:) in method calcWaterFee
        return fee;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/WaterFee_Mutant2.java:22:
    //@ ensures \result == (tons >= 10 ? 5*(tons-10) - 4*7 - 3*3 : (tons >= 3 ? 4*(tons-3) - 3*3 : 3*tons));  
        ^
2 verification failures

==============================
public class WaterFee_Mutant2 {
    //@ requires tons >= 0;
    //@ ensures \result >= 0;
 
    public static int calcWaterFee(int tons) {
        int n = tons;
        int fee = 0;
        //@ maintaining n >= 0 && n <= tons;
        //@ maintaining fee >= 0;
 
        //@ decreases n;
        while (n > 0) {
            if (n > 10) {
                fee += 5;
            } else if (n > 3) {
                fee += 4;
            } else {
                fee += 3;
            }
            n--;
        }
        return fee;
    }
}

==============================

==============================
