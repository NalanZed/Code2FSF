public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\forall int i; ans < i && i <= x; (long)i * i > x);
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}
==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int i; ans < i && i <= x; (long)i * i > x);
            ^
1 verification failure

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\forall int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int i; ans < i && i < x; (long)i * i > x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\forall int i; ans < i && i < x; (long)i * i >= x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int i; ans < i && i < x; (long)i * i >= x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\forall int i; ans < i && i <= x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int i; ans < i && i <= x; (long)i * i > x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\forall int i; ans < i && i <= x; (long)i * i >= x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int i; ans < i && i <= x; (long)i * i >= x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\forall int i; ans < i && i - 1 <= x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int i; ans < i && i - 1 <= x; (long)i * i > x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\forall int i; ans < i && i - 1 <= x; (long)i * i >= x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int i; ans < i && i - 1 <= x; (long)i * i >= x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\forall int i; ans <= i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int i; ans <= i && i < x; (long)i * i > x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\forall int i; ans <= i && i < x; (long)i * i >= x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int i; ans <= i && i < x; (long)i * i >= x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\forall int i; ans <= i && i <= x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int i; ans <= i && i <= x; (long)i * i > x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\forall int i; ans <= i && i <= x; (long)i * i >= x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int i; ans <= i && i <= x; (long)i * i >= x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\forall int i; ans <= i && i - 1 <= x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int i; ans <= i && i - 1 <= x; (long)i * i > x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\forall int i; ans <= i && i - 1 <= x; (long)i * i >= x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int i; ans <= i && i - 1 <= x; (long)i * i >= x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) <= 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result + 1) <= 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) >= x || (\result + 1) * (\result + 1) < 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result + 1) >= x || (\result + 1) * (\result + 1) < 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) >= x || (\result + 1) * (\result + 1) <= 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result + 1) >= x || (\result + 1) * (\result + 1) <= 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result - 1) < 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result - 1) < 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result - 1) <= 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result + 1) > x || (\result + 1) * (\result - 1) <= 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result - 1) * (\result + 1) < 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result + 1) > x || (\result - 1) * (\result + 1) < 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result - 1) * (\result + 1) <= 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result + 1) > x || (\result - 1) * (\result + 1) <= 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result - 1) * (\result - 1) < 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result + 1) > x || (\result - 1) * (\result - 1) < 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || (\result - 1) * (\result - 1) <= 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result + 1) > x || (\result - 1) * (\result - 1) <= 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) >= x || (\result + 1) * (\result - 1) < 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result + 1) >= x || (\result + 1) * (\result - 1) < 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) >= x || (\result + 1) * (\result - 1) <= 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result + 1) >= x || (\result + 1) * (\result - 1) <= 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) >= x || (\result - 1) * (\result + 1) < 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result + 1) >= x || (\result - 1) * (\result + 1) < 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) >= x || (\result - 1) * (\result + 1) <= 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result + 1) >= x || (\result - 1) * (\result + 1) <= 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) >= x || (\result - 1) * (\result - 1) < 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result + 1) >= x || (\result - 1) * (\result - 1) < 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) >= x || (\result - 1) * (\result - 1) <= 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result + 1) >= x || (\result - 1) * (\result - 1) <= 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result - 1) > x || (\result + 1) * (\result + 1) < 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result - 1) > x || (\result + 1) * (\result + 1) < 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result - 1) > x || (\result + 1) * (\result + 1) <= 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result - 1) > x || (\result + 1) * (\result + 1) <= 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result - 1) > x || (\result + 1) * (\result - 1) < 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result - 1) > x || (\result + 1) * (\result - 1) < 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result - 1) > x || (\result + 1) * (\result - 1) <= 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result - 1) > x || (\result + 1) * (\result - 1) <= 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result - 1) > x || (\result - 1) * (\result + 1) < 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result - 1) > x || (\result - 1) * (\result + 1) < 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result - 1) > x || (\result - 1) * (\result + 1) <= 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result - 1) > x || (\result - 1) * (\result + 1) <= 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result - 1) > x || (\result - 1) * (\result - 1) < 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result - 1) > x || (\result - 1) * (\result - 1) < 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result - 1) > x || (\result - 1) * (\result - 1) <= 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result - 1) > x || (\result - 1) * (\result - 1) <= 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result - 1) >= x || (\result + 1) * (\result + 1) < 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result - 1) >= x || (\result + 1) * (\result + 1) < 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result - 1) >= x || (\result + 1) * (\result + 1) <= 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result - 1) >= x || (\result + 1) * (\result + 1) <= 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result - 1) >= x || (\result + 1) * (\result - 1) < 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result - 1) >= x || (\result + 1) * (\result - 1) < 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result - 1) >= x || (\result + 1) * (\result - 1) <= 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result - 1) >= x || (\result + 1) * (\result - 1) <= 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result - 1) >= x || (\result - 1) * (\result + 1) < 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result - 1) >= x || (\result - 1) * (\result + 1) < 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result - 1) >= x || (\result - 1) * (\result + 1) <= 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result - 1) >= x || (\result - 1) * (\result + 1) <= 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result - 1) >= x || (\result - 1) * (\result - 1) < 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result - 1) >= x || (\result - 1) * (\result - 1) < 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result - 1) >= x || (\result - 1) * (\result - 1) <= 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result + 1) * (\result - 1) >= x || (\result - 1) * (\result - 1) <= 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result - 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result - 1) * (\result + 1) > x || (\result + 1) * (\result + 1) < 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result - 1) * (\result + 1) > x || (\result + 1) * (\result + 1) <= 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant1.java:23:
    //@ ensures (\result - 1) * (\result + 1) > x || (\result + 1) * (\result + 1) <= 0;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant1 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result - 1) * (\result + 1) > x || (\result + 1) * (\result - 1) < 0;  
    public static int mySqrt(int x) {
        int l = 1, r = x, ans = -1;
        //@ maintaining 1 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining ans >= -1;
        //@ maintaining (ans >= 0) ==> ((long)ans * ans <= x);
        //@ maintaining (\exists int i; ans < i && i < x; (long)i * i > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================

==============================
