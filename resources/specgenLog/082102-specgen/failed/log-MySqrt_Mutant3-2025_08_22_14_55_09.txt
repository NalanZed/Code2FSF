public class MySqrt_Mutant3 {
    /*@ requires x >= 0;
      @ ensures \result >= 0;
      @ ensures (long)\result * \result <= x;
      @ ensures (long)(\result + 1) * (\result + 1) > x;
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining l <= r + 1;
        //@ maintaining (\forall int i; 0 <= i && i < l; (long)i * i <= x);
        //@ maintaining (\forall int i; r < i && i <= x; (long)i * i > x);
        //@ maintaining ans >= 0 && (long)ans * ans <= x;
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}
==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant3.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant3.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant3.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant3.java:25:
      @ ensures (long)(\result + 1) * (\result + 1) > x;
        ^
2 verification failures

==============================
public class MySqrt_Mutant3 {
    /*@ requires x >= 0;
      @ ensures \result >= 0;
      @ ensures (long)\result * \result <= x;
      @ ensures (long)(\result + 1) * (\result + 1) > x;  
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining l <= r + 1;
        //@ maintaining (\forall int i; 0 <= i && i < l; (long)i * i <= x);
        //@ maintaining (\forall int i; r < i && i <= x; (long)i * i > x);
        //@ maintaining ans >= 0 && (long)ans * ans <= x;
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant3.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant3.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant3.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant3.java:25:
      @ ensures (long)(\result + 1) * (\result + 1) > x;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant3 {
    /*@ requires x >= 0;
      @ ensures \result >= 0;
      @ ensures (long)\result * \result <= x;
      @ ensures (long)(\result + 1) * (\result + 1) >= x;  
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining l <= r + 1;
        //@ maintaining (\forall int i; 0 <= i && i < l; (long)i * i <= x);
        //@ maintaining (\forall int i; r < i && i <= x; (long)i * i > x);
        //@ maintaining ans >= 0 && (long)ans * ans <= x;
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant3.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant3.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant3.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant3.java:25:
      @ ensures (long)(\result + 1) * (\result + 1) >= x;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant3 {
    /*@ requires x >= 0;
      @ ensures \result >= 0;
      @ ensures (long)\result * \result <= x;
      @ ensures (long)(\result + 1) * (\result - 1) > x;  
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining l <= r + 1;
        //@ maintaining (\forall int i; 0 <= i && i < l; (long)i * i <= x);
        //@ maintaining (\forall int i; r < i && i <= x; (long)i * i > x);
        //@ maintaining ans >= 0 && (long)ans * ans <= x;
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant3.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant3.java:5:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant3.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/082102-specgen/tmp/MySqrt_Mutant3.java:25:
      @ ensures (long)(\result + 1) * (\result - 1) > x;  
        ^
2 verification failures

==============================
public class MySqrt_Mutant3 {
    /*@ requires x >= 0;
      @ ensures \result >= 0;
      @ ensures (long)\result * \result <= x;
      @ ensures (long)(\result + 1) * (\result - 1) >= x;  
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining 0 <= r && r <= x;
        //@ maintaining l <= r + 1;
        //@ maintaining (\forall int i; 0 <= i && i < l; (long)i * i <= x);
        //@ maintaining (\forall int i; r < i && i <= x; (long)i * i > x);
        //@ maintaining ans >= 0 && (long)ans * ans <= x;
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================

==============================
