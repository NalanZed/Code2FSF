public class DivisionOverflow_Mutant3 {
    //@ requires denom != 0;
    //@ requires !(nom == Integer.MAX_VALUE && denom == 1); // prevents overflow in nom+1
    //@ ensures \result == (nom + 1) / denom;
    public static int division_test_fail_overflow(int nom, int denom) {
        int tmp = (nom+1) / denom; // modifying nom by adding 1
        return tmp;
    }
}
==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/DivisionOverflow_Mutant3.java:7: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/DivisionOverflow_Mutant3.java:4:) in method division_test_fail_overflow
        return tmp;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/DivisionOverflow_Mutant3.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/DivisionOverflow_Mutant3.java:7:
    //@ ensures \result == (nom + 1) / denom;
        ^
2 verification failures

==============================
public class DivisionOverflow_Mutant3 {
    //@ requires denom != 0;
    //@ requires !(nom == Integer.MAX_VALUE && denom == 1); // prevents overflow in nom+1
    //@ ensures \result == (nom + 1) / denom;  
    public static int division_test_fail_overflow(int nom, int denom) {
        int tmp = (nom+1) / denom; // modifying nom by adding 1
        return tmp;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/DivisionOverflow_Mutant3.java:7: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/DivisionOverflow_Mutant3.java:4:) in method division_test_fail_overflow
        return tmp;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/DivisionOverflow_Mutant3.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/DivisionOverflow_Mutant3.java:7:
    //@ ensures \result == (nom + 1) / denom;  
        ^
2 verification failures

==============================
public class DivisionOverflow_Mutant3 {
    //@ requires denom != 0;
    //@ requires !(nom == Integer.MAX_VALUE && denom == 1); // prevents overflow in nom+1
    //@ ensures \result == (nom - 1) / denom;  
    public static int division_test_fail_overflow(int nom, int denom) {
        int tmp = (nom+1) / denom; // modifying nom by adding 1
        return tmp;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/DivisionOverflow_Mutant3.java:7: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/DivisionOverflow_Mutant3.java:4:) in method division_test_fail_overflow
        return tmp;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/DivisionOverflow_Mutant3.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/DivisionOverflow_Mutant3.java:7:
    //@ ensures \result == (nom - 1) / denom;  
        ^
2 verification failures

==============================
public class DivisionOverflow_Mutant3 {
    //@ requires denom != 0;
    //@ requires !(nom == Integer.MAX_VALUE && denom == 1); // prevents overflow in nom+1
 
    public static int division_test_fail_overflow(int nom, int denom) {
        int tmp = (nom+1) / denom; // modifying nom by adding 1
        return tmp;
    }
}

==============================

==============================
