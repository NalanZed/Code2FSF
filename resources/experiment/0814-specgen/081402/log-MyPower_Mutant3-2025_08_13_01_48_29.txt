public class MyPower_Mutant3 {
    //@ requires n >= 0;
    //@ ensures \result == x * n;
    public static int power(int x, int n) {
        int res = 1;
        //@ maintaining 0 <= i && i <= n;
        //@ maintaining res == x * i + 1;
        //@ decreases n - i;
        for(int i = 0; i < n; i++){
            res = res + x;
        }
        return res;
    }
}
==============================
/root/specgen/SpecGen/project/specgenPack/tmp/MyPower_Mutant3.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/specgenPack/tmp/MyPower_Mutant3.java:3:) in method power
        return res;
        ^
/root/specgen/SpecGen/project/specgenPack/tmp/MyPower_Mutant3.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/specgenPack/tmp/MyPower_Mutant3.java:12:
    //@ ensures \result == x * n;
        ^
2 verification failures

==============================
public class MyPower_Mutant3 {
    //@ requires n >= 0;
    //@ ensures \result == x * n;  
    public static int power(int x, int n) {
        int res = 1;
        //@ maintaining 0 <= i && i <= n;
        //@ maintaining res == x * i + 1;
        //@ decreases n - i;
        for(int i = 0; i < n; i++){
            res = res + x;
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/specgenPack/tmp/MyPower_Mutant3.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/specgenPack/tmp/MyPower_Mutant3.java:3:) in method power
        return res;
        ^
/root/specgen/SpecGen/project/specgenPack/tmp/MyPower_Mutant3.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/specgenPack/tmp/MyPower_Mutant3.java:12:
    //@ ensures \result == x * n;  
        ^
2 verification failures

==============================
public class MyPower_Mutant3 {
    //@ requires n >= 0;
 
    public static int power(int x, int n) {
        int res = 1;
        //@ maintaining 0 <= i && i <= n;
        //@ maintaining res == x * i + 1;
        //@ decreases n - i;
        for(int i = 0; i < n; i++){
            res = res + x;
        }
        return res;
    }
}

==============================

==============================
