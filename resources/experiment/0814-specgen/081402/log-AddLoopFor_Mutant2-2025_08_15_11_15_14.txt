public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y + ((x > 0) ? ((x + 1)/2) : (-((-x + 1)/2)));
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n >= 0 && n <= x;
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}
==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:9: verify: The prover cannot establish an assertion (LoopInvariant) in method addLoop
            //@ maintaining n >= 0 && n <= x;
                ^
1 verification failure

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y + ((x > 0) ? ((x + 1)/2) : (-((-x + 1)/2)));
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n > 0 && n < x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method addLoop
            //@ maintaining n > 0 && n < x;  
                ^
1 verification failure

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y + ((x > 0) ? ((x + 1)/2) : (-((-x + 1)/2)));
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n > 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:9: verify: The prover cannot establish an assertion (LoopInvariant) in method addLoop
            //@ maintaining n > 0 && n <= x;  
                ^
1 verification failure

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y + ((x > 0) ? ((x + 1)/2) : (-((-x + 1)/2)));
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n > 0 && n - 1 <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:9: verify: The prover cannot establish an assertion (LoopInvariant) in method addLoop
            //@ maintaining n > 0 && n - 1 <= x;  
                ^
1 verification failure

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y + ((x > 0) ? ((x + 1)/2) : (-((-x + 1)/2)));
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n >= 0 && n < x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method addLoop
            //@ maintaining n >= 0 && n < x;  
                ^
1 verification failure

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y + ((x > 0) ? ((x + 1)/2) : (-((-x + 1)/2)));
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:9: verify: The prover cannot establish an assertion (LoopInvariant) in method addLoop
            //@ maintaining n >= 0 && n <= x;  
                ^
1 verification failure

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y + ((x > 0) ? ((x + 1)/2) : (-((-x + 1)/2)));
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n >= 0 && n - 1 <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:9: verify: The prover cannot establish an assertion (LoopInvariant) in method addLoop
            //@ maintaining n >= 0 && n - 1 <= x;  
                ^
1 verification failure

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y + ((x > 0) ? ((x + 1)/2) : (-((-x + 1)/2)));
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n < x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:9: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method addLoop
            //@ maintaining n + 1 >= 0 && n < x;  
                ^
1 verification failure

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y + ((x > 0) ? ((x + 1)/2) : (-((-x + 1)/2)));
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25:
    //@ ensures \result == y + ((x > 0) ? ((x + 1)/2) : (-((-x + 1)/2)));
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y + ((x > 0) ? ((x + 1)/2) : (-((-x + 1)/2)));  
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25:
    //@ ensures \result == y + ((x > 0) ? ((x + 1)/2) : (-((-x + 1)/2)));  
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y + ((x >= 0) ? ((x + 1)/2) : (-((-x + 1)/2)));  
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25:
    //@ ensures \result == y + ((x >= 0) ? ((x + 1)/2) : (-((-x + 1)/2)));  
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y + ((x > 0) ? ((x + 1)/2) : (-((-x - 1)/2)));  
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25:
    //@ ensures \result == y + ((x > 0) ? ((x + 1)/2) : (-((-x - 1)/2)));  
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y + ((x > 0) ? ((x - 1)/2) : (-((-x + 1)/2)));  
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25:
    //@ ensures \result == y + ((x > 0) ? ((x - 1)/2) : (-((-x + 1)/2)));  
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y + ((x > 0) ? ((x - 1)/2) : (-((-x - 1)/2)));  
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25:
    //@ ensures \result == y + ((x > 0) ? ((x - 1)/2) : (-((-x - 1)/2)));  
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y + ((x >= 0) ? ((x + 1)/2) : (-((-x - 1)/2)));  
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25:
    //@ ensures \result == y + ((x >= 0) ? ((x + 1)/2) : (-((-x - 1)/2)));  
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y + ((x >= 0) ? ((x - 1)/2) : (-((-x + 1)/2)));  
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25:
    //@ ensures \result == y + ((x >= 0) ? ((x - 1)/2) : (-((-x + 1)/2)));  
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y + ((x >= 0) ? ((x - 1)/2) : (-((-x - 1)/2)));  
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25:
    //@ ensures \result == y + ((x >= 0) ? ((x - 1)/2) : (-((-x - 1)/2)));  
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y - ((x > 0) ? ((x + 1)/2) : (-((-x + 1)/2)));  
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25:
    //@ ensures \result == y - ((x > 0) ? ((x + 1)/2) : (-((-x + 1)/2)));  
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y - ((x > 0) ? ((x + 1)/2) : (-((-x - 1)/2)));  
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25:
    //@ ensures \result == y - ((x > 0) ? ((x + 1)/2) : (-((-x - 1)/2)));  
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y - ((x > 0) ? ((x - 1)/2) : (-((-x + 1)/2)));  
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25:
    //@ ensures \result == y - ((x > 0) ? ((x - 1)/2) : (-((-x + 1)/2)));  
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y - ((x > 0) ? ((x - 1)/2) : (-((-x - 1)/2)));  
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25:
    //@ ensures \result == y - ((x > 0) ? ((x - 1)/2) : (-((-x - 1)/2)));  
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y - ((x >= 0) ? ((x + 1)/2) : (-((-x + 1)/2)));  
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25:
    //@ ensures \result == y - ((x >= 0) ? ((x + 1)/2) : (-((-x + 1)/2)));  
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y - ((x >= 0) ? ((x + 1)/2) : (-((-x - 1)/2)));  
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25:
    //@ ensures \result == y - ((x >= 0) ? ((x + 1)/2) : (-((-x - 1)/2)));  
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y - ((x >= 0) ? ((x - 1)/2) : (-((-x + 1)/2)));  
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25:
    //@ ensures \result == y - ((x >= 0) ? ((x - 1)/2) : (-((-x + 1)/2)));  
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
    //@ ensures \result == y - ((x >= 0) ? ((x - 1)/2) : (-((-x - 1)/2)));  
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:25:
    //@ ensures \result == y - ((x >= 0) ? ((x - 1)/2) : (-((-x - 1)/2)));  
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
 
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:18: verify: The prover cannot establish an assertion (LoopInvariant) in method addLoop
            //@ maintaining n >= 0 && n <= -x;
                ^
1 verification failure

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
 
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n > 0 && n < -x;  
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method addLoop
            //@ maintaining n > 0 && n < -x;  
                ^
1 verification failure

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
 
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n > 0 && n <= -x;  
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:18: verify: The prover cannot establish an assertion (LoopInvariant) in method addLoop
            //@ maintaining n > 0 && n <= -x;  
                ^
1 verification failure

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
 
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n > 0 && n - 1 <= -x;  
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:18: verify: The prover cannot establish an assertion (LoopInvariant) in method addLoop
            //@ maintaining n > 0 && n - 1 <= -x;  
                ^
1 verification failure

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
 
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n < -x;  
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method addLoop
            //@ maintaining n >= 0 && n < -x;  
                ^
1 verification failure

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
 
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n <= -x;  
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:18: verify: The prover cannot establish an assertion (LoopInvariant) in method addLoop
            //@ maintaining n >= 0 && n <= -x;  
                ^
1 verification failure

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
 
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n >= 0 && n - 1 <= -x;  
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:18: verify: The prover cannot establish an assertion (LoopInvariant) in method addLoop
            //@ maintaining n >= 0 && n - 1 <= -x;  
                ^
1 verification failure

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
 
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n + 1 >= 0 && n < -x;  
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/AddLoopFor_Mutant2.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method addLoop
            //@ maintaining n + 1 >= 0 && n < -x;  
                ^
1 verification failure

==============================
public class AddLoopFor_Mutant2 {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE;
 
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x > 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n + 1)/2;
            //@ maintaining n + 1 >= 0 && n <= x;  
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 2;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - ((-x - n + 1)/2);
            //@ maintaining n + 1 >= 0 && n <= -x;  
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 2;
            }
        }
        return sum;
    }
}

==============================

==============================
