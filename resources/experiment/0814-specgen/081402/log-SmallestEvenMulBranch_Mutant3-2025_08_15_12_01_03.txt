public class SmallestEvenMulBranch_Mutant3 {

    /*@ public normal_behavior
      @   requires n >= 0;
      @   ensures n % 2 != 0 ==> \result == n;
      @   ensures n % 2 == 0 ==> \result == 2 * n;
      @   ensures \result % 2 == 0;
      @*/
    public static int smallestEvenMultiple(int n) {
        if (n % 2 != 0) {
            return n;
        }
        return 2 * n;
    }
}
==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/SmallestEvenMulBranch_Mutant3.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/SmallestEvenMulBranch_Mutant3.java:7:) in method smallestEvenMultiple
            return n;
            ^
/root/specgen/SpecGen/project/081402-specgen/tmp/SmallestEvenMulBranch_Mutant3.java:7: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/SmallestEvenMulBranch_Mutant3.java:11:
      @   ensures \result % 2 == 0;
          ^
2 verification failures

==============================
public class SmallestEvenMulBranch_Mutant3 {

    /*@ public normal_behavior
      @   requires n >= 0;
      @   ensures n % 2 != 0 ==> \result == n;
      @   ensures n % 2 == 0 ==> \result == 2 * n;
      @   ensures \result % 2 == 0;  
      @*/
    public static int smallestEvenMultiple(int n) {
        if (n % 2 != 0) {
            return n;
        }
        return 2 * n;
    }
}

==============================
/root/specgen/SpecGen/project/081402-specgen/tmp/SmallestEvenMulBranch_Mutant3.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081402-specgen/tmp/SmallestEvenMulBranch_Mutant3.java:7:) in method smallestEvenMultiple
            return n;
            ^
/root/specgen/SpecGen/project/081402-specgen/tmp/SmallestEvenMulBranch_Mutant3.java:7: verify: Associated declaration: /root/specgen/SpecGen/project/081402-specgen/tmp/SmallestEvenMulBranch_Mutant3.java:11:
      @   ensures \result % 2 == 0;  
          ^
2 verification failures

==============================
public class SmallestEvenMulBranch_Mutant3 {

    /*@ public normal_behavior
      @   requires n >= 0;
      @   ensures n % 2 != 0 ==> \result == n;
      @   ensures n % 2 == 0 ==> \result == 2 * n;
 
      @*/
    public static int smallestEvenMultiple(int n) {
        if (n % 2 != 0) {
            return n;
        }
        return 2 * n;
    }
}

==============================

==============================
