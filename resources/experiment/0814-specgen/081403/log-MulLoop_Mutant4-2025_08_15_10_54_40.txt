public class MulLoop_Mutant4 {
    //@ requires b >= 0 ==> a * b <= Integer.MAX_VALUE;
    //@ requires b < 0 ==> a * b >= Integer.MIN_VALUE;
    //@ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b >= 0 ? 1 : -1);
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * (i / 2);
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * (i / 2);
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}
==============================
/root/specgen/SpecGen/project/081403-specgen/tmp/MulLoop_Mutant4.java:22: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081403-specgen/tmp/MulLoop_Mutant4.java:4:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081403-specgen/tmp/MulLoop_Mutant4.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/081403-specgen/tmp/MulLoop_Mutant4.java:22:
    //@ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b >= 0 ? 1 : -1);
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    //@ requires b >= 0 ==> a * b <= Integer.MAX_VALUE;
    //@ requires b < 0 ==> a * b >= Integer.MIN_VALUE;
    //@ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b > 0 ? 1 : -1);  
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * (i / 2);
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * (i / 2);
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================

==============================
