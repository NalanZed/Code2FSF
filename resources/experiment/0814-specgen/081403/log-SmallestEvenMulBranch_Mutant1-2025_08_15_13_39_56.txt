public class SmallestEvenMulBranch_Mutant1 {

    //@ requires n >= 0;
    //@ ensures n % 3 == 0 ==> \result == n;
    //@ ensures n % 3 != 0 ==> \result == 2 * n;
    //@ ensures \result % 2 == 0;
    public static int smallestEvenMultiple(int n) {
        if (n % 3 == 0) {
            return n;
        }
        return 2 * n;
    }
}
==============================
/root/specgen/SpecGen/project/081403-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:9: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081403-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:6:) in method smallestEvenMultiple
            return n;
            ^
/root/specgen/SpecGen/project/081403-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:6: verify: Associated declaration: /root/specgen/SpecGen/project/081403-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:9:
    //@ ensures \result % 2 == 0;
        ^
2 verification failures

==============================
public class SmallestEvenMulBranch_Mutant1 {

    //@ requires n >= 0;
    //@ ensures n % 3 == 0 ==> \result == n;
    //@ ensures n % 3 != 0 ==> \result == 2 * n;
    //@ ensures \result % 2 == 0;  
    public static int smallestEvenMultiple(int n) {
        if (n % 3 == 0) {
            return n;
        }
        return 2 * n;
    }
}

==============================
/root/specgen/SpecGen/project/081403-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:9: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081403-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:6:) in method smallestEvenMultiple
            return n;
            ^
/root/specgen/SpecGen/project/081403-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:6: verify: Associated declaration: /root/specgen/SpecGen/project/081403-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:9:
    //@ ensures \result % 2 == 0;  
        ^
2 verification failures

==============================
public class SmallestEvenMulBranch_Mutant1 {

    //@ requires n >= 0;
    //@ ensures n % 3 == 0 ==> \result == n;
    //@ ensures n % 3 != 0 ==> \result == 2 * n;
 
    public static int smallestEvenMultiple(int n) {
        if (n % 3 == 0) {
            return n;
        }
        return 2 * n;
    }
}

==============================

==============================
