public class SmallestEvenMulBranch_Mutant5 {

    //@ requires n >= 1;
    //@ ensures \result % 2 == 0;
    //@ ensures n % 2 == 0 ==> \result == n;
    //@ ensures n % 2 != 0 ==> \result == n;
    public static int smallestEvenMultiple(int n) {
        if (n % 2 == 0) {
            return n;
        }
        return n;
    }
}
==============================
/root/specgen/SpecGen/project/081403-specgen/tmp/SmallestEvenMulBranch_Mutant5.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081403-specgen/tmp/SmallestEvenMulBranch_Mutant5.java:4:) in method smallestEvenMultiple
        return n;
        ^
/root/specgen/SpecGen/project/081403-specgen/tmp/SmallestEvenMulBranch_Mutant5.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/081403-specgen/tmp/SmallestEvenMulBranch_Mutant5.java:11:
    //@ ensures \result % 2 == 0;
        ^
2 verification failures

==============================
public class SmallestEvenMulBranch_Mutant5 {

    //@ requires n >= 1;
    //@ ensures \result % 2 == 0;  
    //@ ensures n % 2 == 0 ==> \result == n;
    //@ ensures n % 2 != 0 ==> \result == n;
    public static int smallestEvenMultiple(int n) {
        if (n % 2 == 0) {
            return n;
        }
        return n;
    }
}

==============================
/root/specgen/SpecGen/project/081403-specgen/tmp/SmallestEvenMulBranch_Mutant5.java:11: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081403-specgen/tmp/SmallestEvenMulBranch_Mutant5.java:4:) in method smallestEvenMultiple
        return n;
        ^
/root/specgen/SpecGen/project/081403-specgen/tmp/SmallestEvenMulBranch_Mutant5.java:4: verify: Associated declaration: /root/specgen/SpecGen/project/081403-specgen/tmp/SmallestEvenMulBranch_Mutant5.java:11:
    //@ ensures \result % 2 == 0;  
        ^
2 verification failures

==============================
public class SmallestEvenMulBranch_Mutant5 {

    //@ requires n >= 1;
 
    //@ ensures n % 2 == 0 ==> \result == n;
    //@ ensures n % 2 != 0 ==> \result == n;
    public static int smallestEvenMultiple(int n) {
        if (n % 2 == 0) {
            return n;
        }
        return n;
    }
}

==============================

==============================
