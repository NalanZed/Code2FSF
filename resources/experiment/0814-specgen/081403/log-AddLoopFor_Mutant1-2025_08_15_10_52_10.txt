public class AddLoopFor_Mutant1 {
    //@ ensures \result == x + y;
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x <= 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n);
            //@ maintaining n <= x;
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - (x + n);
            //@ maintaining n >= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}
==============================
/root/specgen/SpecGen/project/081403-specgen/tmp/AddLoopFor_Mutant1.java:24: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081403-specgen/tmp/AddLoopFor_Mutant1.java:2:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081403-specgen/tmp/AddLoopFor_Mutant1.java:2: verify: Associated declaration: /root/specgen/SpecGen/project/081403-specgen/tmp/AddLoopFor_Mutant1.java:24:
    //@ ensures \result == x + y;
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant1 {
    //@ ensures \result == x + y;  
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x <= 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n);
            //@ maintaining n <= x;
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - (x + n);
            //@ maintaining n >= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081403-specgen/tmp/AddLoopFor_Mutant1.java:24: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081403-specgen/tmp/AddLoopFor_Mutant1.java:2:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081403-specgen/tmp/AddLoopFor_Mutant1.java:2: verify: Associated declaration: /root/specgen/SpecGen/project/081403-specgen/tmp/AddLoopFor_Mutant1.java:24:
    //@ ensures \result == x + y;  
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant1 {
    //@ ensures \result == x - y;  
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x <= 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n);
            //@ maintaining n <= x;
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - (x + n);
            //@ maintaining n >= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081403-specgen/tmp/AddLoopFor_Mutant1.java:24: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081403-specgen/tmp/AddLoopFor_Mutant1.java:2:) in method addLoop
        return sum;
        ^
/root/specgen/SpecGen/project/081403-specgen/tmp/AddLoopFor_Mutant1.java:2: verify: Associated declaration: /root/specgen/SpecGen/project/081403-specgen/tmp/AddLoopFor_Mutant1.java:24:
    //@ ensures \result == x - y;  
        ^
2 verification failures

==============================
public class AddLoopFor_Mutant1 {
 
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x <= 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n);
            //@ maintaining n <= x;
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - (x + n);
            //@ maintaining n >= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081403-specgen/tmp/AddLoopFor_Mutant1.java:16: verify: The prover cannot establish an assertion (LoopInvariant) in method addLoop
            //@ maintaining sum == y - (x + n);
                ^
1 verification failure

==============================
public class AddLoopFor_Mutant1 {
 
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x <= 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n);
            //@ maintaining n <= x;
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y - (x + n);  
            //@ maintaining n >= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}

==============================
/root/specgen/SpecGen/project/081403-specgen/tmp/AddLoopFor_Mutant1.java:16: verify: The prover cannot establish an assertion (LoopInvariant) in method addLoop
            //@ maintaining sum == y - (x + n);  
                ^
1 verification failure

==============================
public class AddLoopFor_Mutant1 {
 
    public static int addLoop(int x, int y) {
        int sum = y;
        if (x <= 0) {
            int n = 0;
            //@ maintaining sum == y + (x - n);
            //@ maintaining n <= x;
            //@ decreases n;
            for(n = x; n > 0; ) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = 0;
            //@ maintaining sum == y + (x + n);  
            //@ maintaining n >= -x;
            //@ decreases n;
            for(n = -x; n > 0; ) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}

==============================

==============================
