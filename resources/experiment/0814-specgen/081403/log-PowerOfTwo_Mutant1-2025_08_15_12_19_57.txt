public class PowerOfTwo_Mutant1 {

    /*@ ensures \result <==> (n >= 0 && (\exists int k; k >= 0; n == (1 << k)));
      @ pure @*/
    public static boolean isPowerOfTwo(int n) {
        return n >= 0 && (n & (n - 1)) == 0;
    }
}
==============================
/root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:6: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:3:) in method isPowerOfTwo
        return n >= 0 && (n & (n - 1)) == 0;
        ^
/root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:6:
    /*@ ensures \result <==> (n >= 0 && (\exists int k; k >= 0; n == (1 << k)));
        ^
2 verification failures

==============================
public class PowerOfTwo_Mutant1 {

    /*@ ensures \result <==> (n > 0 && (\exists int k; k > 0; n == (1 << k)));  
      @ pure @*/
    public static boolean isPowerOfTwo(int n) {
        return n >= 0 && (n & (n - 1)) == 0;
    }
}

==============================
/root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:6: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:3:) in method isPowerOfTwo
        return n >= 0 && (n & (n - 1)) == 0;
        ^
/root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:6:
    /*@ ensures \result <==> (n > 0 && (\exists int k; k > 0; n == (1 << k)));  
        ^
2 verification failures

==============================
public class PowerOfTwo_Mutant1 {

    /*@ ensures \result <==> (n > 0 && (\exists int k; k >= 0; n == (1 << k)));  
      @ pure @*/
    public static boolean isPowerOfTwo(int n) {
        return n >= 0 && (n & (n - 1)) == 0;
    }
}

==============================
/root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:6: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:3:) in method isPowerOfTwo
        return n >= 0 && (n & (n - 1)) == 0;
        ^
/root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:6:
    /*@ ensures \result <==> (n > 0 && (\exists int k; k >= 0; n == (1 << k)));  
        ^
2 verification failures

==============================
public class PowerOfTwo_Mutant1 {

    /*@ ensures \result <==> (n > 0 && (\exists int k; k + 1 >= 0; n == (1 << k)));  
      @ pure @*/
    public static boolean isPowerOfTwo(int n) {
        return n >= 0 && (n & (n - 1)) == 0;
    }
}

==============================
/root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:6: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:3:) in method isPowerOfTwo
        return n >= 0 && (n & (n - 1)) == 0;
        ^
/root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:6:
    /*@ ensures \result <==> (n > 0 && (\exists int k; k + 1 >= 0; n == (1 << k)));  
        ^
2 verification failures

==============================
public class PowerOfTwo_Mutant1 {

    /*@ ensures \result <==> (n >= 0 && (\exists int k; k > 0; n == (1 << k)));  
      @ pure @*/
    public static boolean isPowerOfTwo(int n) {
        return n >= 0 && (n & (n - 1)) == 0;
    }
}

==============================
/root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:6: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:3:) in method isPowerOfTwo
        return n >= 0 && (n & (n - 1)) == 0;
        ^
/root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:6:
    /*@ ensures \result <==> (n >= 0 && (\exists int k; k > 0; n == (1 << k)));  
        ^
2 verification failures

==============================
public class PowerOfTwo_Mutant1 {

    /*@ ensures \result <==> (n >= 0 && (\exists int k; k >= 0; n == (1 << k)));  
      @ pure @*/
    public static boolean isPowerOfTwo(int n) {
        return n >= 0 && (n & (n - 1)) == 0;
    }
}

==============================
/root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:6: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:3:) in method isPowerOfTwo
        return n >= 0 && (n & (n - 1)) == 0;
        ^
/root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081403-specgen/tmp/PowerOfTwo_Mutant1.java:6:
    /*@ ensures \result <==> (n >= 0 && (\exists int k; k >= 0; n == (1 << k)));  
        ^
2 verification failures

==============================
public class PowerOfTwo_Mutant1 {

    /*@ ensures \result <==> (n >= 0 && (\exists int k; k + 1 >= 0; n == (1 << k)));  
      @ pure @*/
    public static boolean isPowerOfTwo(int n) {
        return n >= 0 && (n & (n - 1)) == 0;
    }
}

==============================

==============================
