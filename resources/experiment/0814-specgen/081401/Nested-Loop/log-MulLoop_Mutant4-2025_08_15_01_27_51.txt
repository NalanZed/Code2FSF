public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b >= 0 ? 1 : -1);
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}
==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b >= 0 ? 1 : -1);
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b > 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b > 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b + 1 >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b + 1 >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b > 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b > 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b + 1 >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b + 1 >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b > 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b > 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b + 1 >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b + 1 >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b > 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b > 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b + 1 >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b + 1 >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b > 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b > 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b + 1 >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b + 1 >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b > 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b > 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b + 1 >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b > 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b + 1 >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b > 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b > 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b + 1 >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b + 1 >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b > 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b > 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b + 1 >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b + 1 >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b > 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b > 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b + 1 >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b + 1 >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b > 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b > 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b + 1 >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b + 1 >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b > 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b > 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b + 1 >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b + 1) : (-b % 2 == 0 ? -b : -b - 1)) * (b + 1 >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b > 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b > 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b + 1 >= 0 ? 1 : -1);  
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5:) in method mulLoop
        return res;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:25:
      @ ensures \result == a * (b + 1 >= 0 ? (b % 2 == 0 ? b : b - 1) : (-b % 2 == 0 ? -b : -b + 1)) * (b + 1 >= 0 ? 1 : -1);  
        ^
2 verification failures

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
 
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:11: verify: The prover cannot establish an assertion (LoopInvariant) in method mulLoop
            //@ maintaining 0 <= i && i <= b;
                ^
1 verification failure

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
 
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 < i && i < b;  
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining 0 < i && i < b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
 
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 < i && i <= b;  
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining 0 < i && i <= b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
 
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 < i && i - 1 <= b;  
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining 0 < i && i - 1 <= b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
 
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i < b;  
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:11: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining 0 <= i && i < b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
 
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i <= b;  
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:11: verify: The prover cannot establish an assertion (LoopInvariant) in method mulLoop
            //@ maintaining 0 <= i && i <= b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
 
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i - 1 <= b;  
            //@ maintaining res == a * i;
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariant) in method mulLoop
            //@ maintaining res == a * i;
                ^
1 verification failure

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
 
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i - 1 <= b;  
            //@ maintaining res == a * i;  
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariant) in method mulLoop
            //@ maintaining res == a * i;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
 
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i - 1 <= b;  
 
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:18: verify: The prover cannot establish an assertion (LoopInvariant) in method mulLoop
            //@ maintaining 0 <= i && i <= -b;
                ^
1 verification failure

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
 
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i - 1 <= b;  
 
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 < i && i < -b;  
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining 0 < i && i < -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
 
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i - 1 <= b;  
 
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 < i && i <= -b;  
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining 0 < i && i <= -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
 
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i - 1 <= b;  
 
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 < i && i - 1 <= -b;  
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:18: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mulLoop
            //@ maintaining 0 < i && i - 1 <= -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
 
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i - 1 <= b;  
 
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i < -b;  
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:18: verify: The prover cannot establish an assertion (LoopInvariant) in method mulLoop
            //@ maintaining 0 <= i && i < -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
 
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i - 1 <= b;  
 
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i <= -b;  
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:18: verify: The prover cannot establish an assertion (LoopInvariant) in method mulLoop
            //@ maintaining 0 <= i && i <= -b;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
 
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i - 1 <= b;  
 
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i - 1 <= -b;  
            //@ maintaining res == -a * i;
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:19: verify: The prover cannot establish an assertion (LoopInvariant) in method mulLoop
            //@ maintaining res == -a * i;
                ^
1 verification failure

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
 
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i - 1 <= b;  
 
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i - 1 <= -b;  
            //@ maintaining res == -a * i;  
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MulLoop_Mutant4.java:19: verify: The prover cannot establish an assertion (LoopInvariant) in method mulLoop
            //@ maintaining res == -a * i;  
                ^
1 verification failure

==============================
public class MulLoop_Mutant4 {
    /*@ public normal_behavior
      @ requires b >= 0 ==> b <= Integer.MAX_VALUE/2;
      @ requires b < 0 ==> -b <= Integer.MAX_VALUE/2;
 
      @ assignable \nothing;
      @*/
    public static int mulLoop(int a, int b) {
        int res = 0;
        if (b >= 0) {
            //@ maintaining 0 <= i && i - 1 <= b;  
 
            //@ decreases b - i;
            for(int i = 0; i < b; i=i+2) { // increased the counter by 2
                res = res + a;
            }
        } else {
            //@ maintaining 0 <= i && i - 1 <= -b;  
 
            //@ decreases (-b) - i;
            for(int i = 0; i < -b; i=i+2) { // increased the counter by 2
                res = res - a;
            }
        }
        return res;
    }
}

==============================

==============================
