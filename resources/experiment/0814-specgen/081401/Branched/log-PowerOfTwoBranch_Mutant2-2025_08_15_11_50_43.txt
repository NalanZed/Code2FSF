public class PowerOfTwoBranch_Mutant2 {
    /*@ requires true;
      @ ensures \result == (\exists int k; k >= 0; n == (1 << k)) && n > 0;
      @*/
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            //@ assert n <= 0 ==> !(\exists int k; k >= 0; n == (1 << k));
            return false;
        }
        if ((n & (n - 1)) == 0) {
            //@ assert (n & (n - 1)) == 0 ==> (\exists int k; k >= 0; n == (1 << k));
            return false;
        }
        //@ assert n > 0 && (n & (n - 1)) != 0 ==> !(\exists int k; k >= 0; n == (1 << k));
        return true;
    }
}
==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/PowerOfTwoBranch_Mutant2.java:8: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/PowerOfTwoBranch_Mutant2.java:3:) in method isPowerOfTwo
            return false;
            ^
/root/specgen/SpecGen/project/081401-specgen/tmp/PowerOfTwoBranch_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/PowerOfTwoBranch_Mutant2.java:8:
      @ ensures \result == (\exists int k; k >= 0; n == (1 << k)) && n > 0;
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant2 {
    /*@ requires true;
      @ ensures \result == (\exists int k; k > 0; n == (1 << k)) && n > 0;  
      @*/
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            //@ assert n <= 0 ==> !(\exists int k; k >= 0; n == (1 << k));
            return false;
        }
        if ((n & (n - 1)) == 0) {
            //@ assert (n & (n - 1)) == 0 ==> (\exists int k; k >= 0; n == (1 << k));
            return false;
        }
        //@ assert n > 0 && (n & (n - 1)) != 0 ==> !(\exists int k; k >= 0; n == (1 << k));
        return true;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/PowerOfTwoBranch_Mutant2.java:8: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/PowerOfTwoBranch_Mutant2.java:3:) in method isPowerOfTwo
            return false;
            ^
/root/specgen/SpecGen/project/081401-specgen/tmp/PowerOfTwoBranch_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/PowerOfTwoBranch_Mutant2.java:8:
      @ ensures \result == (\exists int k; k > 0; n == (1 << k)) && n > 0;  
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant2 {
    /*@ requires true;
      @ ensures \result == (\exists int k; k > 0; n == (1 << k)) && n >= 0;  
      @*/
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            //@ assert n <= 0 ==> !(\exists int k; k >= 0; n == (1 << k));
            return false;
        }
        if ((n & (n - 1)) == 0) {
            //@ assert (n & (n - 1)) == 0 ==> (\exists int k; k >= 0; n == (1 << k));
            return false;
        }
        //@ assert n > 0 && (n & (n - 1)) != 0 ==> !(\exists int k; k >= 0; n == (1 << k));
        return true;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/PowerOfTwoBranch_Mutant2.java:8: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/PowerOfTwoBranch_Mutant2.java:3:) in method isPowerOfTwo
            return false;
            ^
/root/specgen/SpecGen/project/081401-specgen/tmp/PowerOfTwoBranch_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/PowerOfTwoBranch_Mutant2.java:8:
      @ ensures \result == (\exists int k; k > 0; n == (1 << k)) && n >= 0;  
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant2 {
    /*@ requires true;
      @ ensures \result == (\exists int k; k >= 0; n == (1 << k)) && n > 0;  
      @*/
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            //@ assert n <= 0 ==> !(\exists int k; k >= 0; n == (1 << k));
            return false;
        }
        if ((n & (n - 1)) == 0) {
            //@ assert (n & (n - 1)) == 0 ==> (\exists int k; k >= 0; n == (1 << k));
            return false;
        }
        //@ assert n > 0 && (n & (n - 1)) != 0 ==> !(\exists int k; k >= 0; n == (1 << k));
        return true;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/PowerOfTwoBranch_Mutant2.java:8: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/PowerOfTwoBranch_Mutant2.java:3:) in method isPowerOfTwo
            return false;
            ^
/root/specgen/SpecGen/project/081401-specgen/tmp/PowerOfTwoBranch_Mutant2.java:3: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/PowerOfTwoBranch_Mutant2.java:8:
      @ ensures \result == (\exists int k; k >= 0; n == (1 << k)) && n > 0;  
        ^
2 verification failures

==============================
public class PowerOfTwoBranch_Mutant2 {
    /*@ requires true;
      @ ensures \result == (\exists int k; k >= 0; n == (1 << k)) && n >= 0;  
      @*/
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            //@ assert n <= 0 ==> !(\exists int k; k >= 0; n == (1 << k));
            return false;
        }
        if ((n & (n - 1)) == 0) {
            //@ assert (n & (n - 1)) == 0 ==> (\exists int k; k >= 0; n == (1 << k));
            return false;
        }
        //@ assert n > 0 && (n & (n - 1)) != 0 ==> !(\exists int k; k >= 0; n == (1 << k));
        return true;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/PowerOfTwoBranch_Mutant2.java:7: verify: The prover cannot establish an assertion (Assert) in method isPowerOfTwo
            //@ assert n <= 0 ==> !(\exists int k; k >= 0; n == (1 << k));
                ^
1 verification failure

==============================
