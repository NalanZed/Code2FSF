public class PassPillowBranch_Mutant3 {
    //@ requires n >= 2;
    //@ requires time >= 0;
    //@ ensures 1 <= \result && \result <= n;
    //@ ensures \result == spec_passPillow(n, time);
    public static int passPillow(int n, int time) {
        time = time % ((n - 1) * 2);
        if (time < n) {
            //@ assert time >= 0 && time < n;
            //@ assert \result == time + 1;
            return time + 1;
        }
        //@ assert time >= n && time < (n - 1) * 2;
        //@ assert \result == n * 2 - time - 2;
        return n * 2 - time - 2;
    }

    /*@ requires n >= 2;
      @ requires time >= 0;
      @ ensures 1 <= \result && \result <= n;
      @ ensures time % ((n - 1) * 2) < n ==> \result == time % ((n - 1) * 2) + 1;
      @ ensures time % ((n - 1) * 2) >= n ==> \result == n * 2 - (time % ((n - 1) * 2)) - 2;
      @ pure
      @ model public static int spec_passPillow(int n, int time) {
      @     int t = time % ((n - 1) * 2);
      @     if (t < n) {
      @         return t + 1;
      @     }
      @     return n * 2 - t - 2;
      @ }
      @*/
}
==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/PassPillowBranch_Mutant3.java:10: error: A \result expression may not be in a assert clause
            //@ assert \result == time + 1;
                        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/PassPillowBranch_Mutant3.java:14: error: A \result expression may not be in a assert clause
        //@ assert \result == n * 2 - time - 2;
                    ^
2 errors

==============================
public class PassPillowBranch_Mutant3 {
    //@ requires n >= 2;
    //@ requires time >= 0;
    //@ ensures 1 <= \result && \result <= n;
    //@ ensures time % ((n - 1) * 2) < n ==> \result == time % ((n - 1) * 2) + 1;
    //@ ensures time % ((n - 1) * 2) >= n ==> \result == n * 2 - (time % ((n - 1) * 2)) - 1;
    public static int passPillow(int n, int time) {
        time = time % ((n - 1) * 2);
        if (time < n) {
            //@ assert time + 1 >= 1 && time + 1 <= n;
            return time + 1;
        }
        //@ assert n * 2 - time - 1 >= 1 && n * 2 - time - 1 <= n;
        return n * 2 - time - 1;
    }
}
==============================

==============================
