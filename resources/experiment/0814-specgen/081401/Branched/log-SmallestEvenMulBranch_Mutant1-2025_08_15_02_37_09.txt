public class SmallestEvenMulBranch_Mutant1 {

    //@ requires n >= 1;
    //@ ensures \result >= 2;
    //@ ensures \result % 2 == 0;
    //@ ensures (n % 2 == 0) ==> (\result == n);
    //@ ensures (n % 2 != 0) ==> (\result == 2 * n);
    public static int smallestEvenMultiple(int n) {
        if (n % 3 == 0) {  // Note: This appears to be a mutant (should likely be % 2)
            return n;
        }
        return 2 * n;
    }
}
==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:10: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:5:) in method smallestEvenMultiple
            return n;
            ^
/root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:10:
    //@ ensures \result % 2 == 0;
        ^
2 verification failures

==============================
public class SmallestEvenMulBranch_Mutant1 {

    //@ requires n >= 1;
    //@ ensures \result >= 2;
    //@ ensures \result % 2 == 0;  
    //@ ensures (n % 2 == 0) ==> (\result == n);
    //@ ensures (n % 2 != 0) ==> (\result == 2 * n);
    public static int smallestEvenMultiple(int n) {
        if (n % 3 == 0) {  // Note: This appears to be a mutant (should likely be % 2)
            return n;
        }
        return 2 * n;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:10: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:5:) in method smallestEvenMultiple
            return n;
            ^
/root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:5: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:10:
    //@ ensures \result % 2 == 0;  
        ^
2 verification failures

==============================
public class SmallestEvenMulBranch_Mutant1 {

    //@ requires n >= 1;
    //@ ensures \result >= 2;
 
    //@ ensures (n % 2 == 0) ==> (\result == n);
    //@ ensures (n % 2 != 0) ==> (\result == 2 * n);
    public static int smallestEvenMultiple(int n) {
        if (n % 3 == 0) {  // Note: This appears to be a mutant (should likely be % 2)
            return n;
        }
        return 2 * n;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:10: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:7:) in method smallestEvenMultiple
            return n;
            ^
/root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:7: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:10:
    //@ ensures (n % 2 != 0) ==> (\result == 2 * n);
        ^
2 verification failures

==============================
public class SmallestEvenMulBranch_Mutant1 {

    //@ requires n >= 1;
    //@ ensures \result >= 2;
 
    //@ ensures (n % 2 == 0) ==> (\result == n);
    //@ ensures (n % 2 != 0) ==> (\result == 2 * n);  
    public static int smallestEvenMultiple(int n) {
        if (n % 3 == 0) {  // Note: This appears to be a mutant (should likely be % 2)
            return n;
        }
        return 2 * n;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:10: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:7:) in method smallestEvenMultiple
            return n;
            ^
/root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:7: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:10:
    //@ ensures (n % 2 != 0) ==> (\result == 2 * n);  
        ^
2 verification failures

==============================
public class SmallestEvenMulBranch_Mutant1 {

    //@ requires n >= 1;
    //@ ensures \result >= 2;
 
    //@ ensures (n % 2 == 0) ==> (\result == n);
 
    public static int smallestEvenMultiple(int n) {
        if (n % 3 == 0) {  // Note: This appears to be a mutant (should likely be % 2)
            return n;
        }
        return 2 * n;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:6:) in method smallestEvenMultiple
        return 2 * n;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:6: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:12:
    //@ ensures (n % 2 == 0) ==> (\result == n);
        ^
2 verification failures

==============================
public class SmallestEvenMulBranch_Mutant1 {

    //@ requires n >= 1;
    //@ ensures \result >= 2;
 
    //@ ensures (n % 2 == 0) ==> (\result == n);  
 
    public static int smallestEvenMultiple(int n) {
        if (n % 3 == 0) {  // Note: This appears to be a mutant (should likely be % 2)
            return n;
        }
        return 2 * n;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:12: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:6:) in method smallestEvenMultiple
        return 2 * n;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:6: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/SmallestEvenMulBranch_Mutant1.java:12:
    //@ ensures (n % 2 == 0) ==> (\result == n);  
        ^
2 verification failures

==============================
public class SmallestEvenMulBranch_Mutant1 {

    //@ requires n >= 1;
    //@ ensures \result >= 2;
 
 
 
    public static int smallestEvenMultiple(int n) {
        if (n % 3 == 0) {  // Note: This appears to be a mutant (should likely be % 2)
            return n;
        }
        return 2 * n;
    }
}

==============================

==============================
