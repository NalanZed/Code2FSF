public class GCD_Mutant1 {
    //@ requires num1 != Integer.MIN_VALUE && num2 != Integer.MIN_VALUE;
    //@ ensures (num1 == 0 && num2 == 0) ==> \result == -1;
    //@ ensures (num1 == 0 && num2 != 0) ==> \result == Math.abs(num2);
    //@ ensures (num1 != 0 && num2 == 0) ==> \result == Math.abs(num1);
    //@ ensures (num1 != 0 && num2 != 0) ==> \result == (\max int i; 1 <= i && i <= Math.abs(num1) && i <= Math.abs(num2) && (num1 % i == 0) && (num2 % i == 0); i) + 1;
    public static int gcd(int num1, int num2) {
        int result = 1;
        if(0 > num1) {
            num1 = -num1;
        }
        if(0 > num2) {
            num2 = -num2;
        }
        if (num1 == 0 && num2 == 0) {
            return -1;
        }
        if (num1 == 0 || num2 == 0) {
            if(num1 > num2) {
                return num1;
            } else {
                return num2;
            }
        }
        //@ maintaining 1 <= i && i <= num1 + 1 && i <= num2 + 1;
        //@ maintaining result == (\max int j; 1 <= j && j < i && num1 % j == 0 && num2 % j == 0; j);
        //@ decreases (num1 + num2) - i;
        for (int i = 1; i <= num1 && i <= num2; i++) {
            if (num1 % i == 0 && num2 % i == 0) {
                result = i;
            }
        }
        return result + 1; //Mutant: Return result + 1 instead of result
    }
}
==============================

==============================
