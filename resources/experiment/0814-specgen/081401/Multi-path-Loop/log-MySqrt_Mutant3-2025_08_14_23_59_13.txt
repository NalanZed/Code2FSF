public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
      @   ensures x < (\result + 1) * (\result + 1);
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
        //@ maintaining x < (ans + 1) * (ans + 1);
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}
==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:14: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining x < (ans + 1) * (ans + 1);
            ^
1 verification failure

==============================
public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
      @   ensures x < (\result + 1) * (\result + 1);
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
        //@ maintaining x < (ans + 1) * (ans + 1);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:14: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining x < (ans + 1) * (ans + 1);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
      @   ensures x < (\result + 1) * (\result + 1);
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
        //@ maintaining x <= (ans + 1) * (ans + 1);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:14: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining x <= (ans + 1) * (ans + 1);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
      @   ensures x < (\result + 1) * (\result + 1);
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
        //@ maintaining x < (ans + 1) * (ans - 1);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:14: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining x < (ans + 1) * (ans - 1);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
      @   ensures x < (\result + 1) * (\result + 1);
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
        //@ maintaining x < (ans - 1) * (ans + 1);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:14: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining x < (ans - 1) * (ans + 1);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
      @   ensures x < (\result + 1) * (\result + 1);
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
        //@ maintaining x < (ans - 1) * (ans - 1);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:14: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining x < (ans - 1) * (ans - 1);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
      @   ensures x < (\result + 1) * (\result + 1);
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
        //@ maintaining x <= (ans + 1) * (ans - 1);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:14: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining x <= (ans + 1) * (ans - 1);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
      @   ensures x < (\result + 1) * (\result + 1);
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
        //@ maintaining x <= (ans - 1) * (ans + 1);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:14: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining x <= (ans - 1) * (ans + 1);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
      @   ensures x < (\result + 1) * (\result + 1);
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
        //@ maintaining x <= (ans - 1) * (ans - 1);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:14: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining x <= (ans - 1) * (ans - 1);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
      @   ensures x < (\result + 1) * (\result + 1);
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
 
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:6:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:6: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:25:
      @   ensures x < (\result + 1) * (\result + 1);
          ^
2 verification failures

==============================
public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
      @   ensures x < (\result + 1) * (\result + 1);  
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
 
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:6:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:6: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:25:
      @   ensures x < (\result + 1) * (\result + 1);  
          ^
2 verification failures

==============================
public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
      @   ensures x <= (\result + 1) * (\result + 1);  
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
 
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:6:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:6: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:25:
      @   ensures x <= (\result + 1) * (\result + 1);  
          ^
2 verification failures

==============================
public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
      @   ensures x < (\result + 1) * (\result - 1);  
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
 
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:6:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:6: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:25:
      @   ensures x < (\result + 1) * (\result - 1);  
          ^
2 verification failures

==============================
public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
      @   ensures x < (\result - 1) * (\result + 1);  
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
 
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:6:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:6: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:25:
      @   ensures x < (\result - 1) * (\result + 1);  
          ^
2 verification failures

==============================
public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
      @   ensures x < (\result - 1) * (\result - 1);  
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
 
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:6:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:6: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:25:
      @   ensures x < (\result - 1) * (\result - 1);  
          ^
2 verification failures

==============================
public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
      @   ensures x <= (\result + 1) * (\result - 1);  
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
 
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:6:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:6: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:25:
      @   ensures x <= (\result + 1) * (\result - 1);  
          ^
2 verification failures

==============================
public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
      @   ensures x <= (\result - 1) * (\result + 1);  
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
 
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:6:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:6: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:25:
      @   ensures x <= (\result - 1) * (\result + 1);  
          ^
2 verification failures

==============================
public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
      @   ensures x <= (\result - 1) * (\result - 1);  
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
 
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:25: verify: The prover cannot establish an assertion (Postcondition: /root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:6:) in method mySqrt
        return ans;
        ^
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:6: verify: Associated declaration: /root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant3.java:25:
      @   ensures x <= (\result - 1) * (\result - 1);  
          ^
2 verification failures

==============================
public class MySqrt_Mutant3 {
    /*@ public normal_behavior
      @   requires x >= 0;
      @   ensures \result >= 0;
      @   ensures (\result * \result) <= x;
 
      @*/
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = 0;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= 0;
        //@ maintaining (\exists int k; 0 <= k && k <= x; ans == k && (k * k) <= x);
 
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid <= x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================

==============================
