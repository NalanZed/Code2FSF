public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans < k && k <= x; (long)k * k >= x);
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}
==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans < k && k <= x; (long)k * k >= x);
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans < k && k < x; (long)k * k > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans < k && k < x; (long)k * k > x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans < k && k < x; (long)k * k >= x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans < k && k < x; (long)k * k >= x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans < k && k < x; (long)k * k + 1 >= x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans < k && k < x; (long)k * k + 1 >= x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans < k && k <= x; (long)k * k > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans < k && k <= x; (long)k * k > x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans < k && k <= x; (long)k * k >= x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans < k && k <= x; (long)k * k >= x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans < k && k <= x; (long)k * k + 1 >= x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans < k && k <= x; (long)k * k + 1 >= x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans < k && k - 1 <= x; (long)k * k > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans < k && k - 1 <= x; (long)k * k > x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans < k && k - 1 <= x; (long)k * k >= x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans < k && k - 1 <= x; (long)k * k >= x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans < k && k - 1 <= x; (long)k * k + 1 >= x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans < k && k - 1 <= x; (long)k * k + 1 >= x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans <= k && k < x; (long)k * k > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans <= k && k < x; (long)k * k > x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans <= k && k < x; (long)k * k >= x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans <= k && k < x; (long)k * k >= x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans <= k && k < x; (long)k * k + 1 >= x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans <= k && k < x; (long)k * k + 1 >= x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans <= k && k <= x; (long)k * k > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans <= k && k <= x; (long)k * k > x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans <= k && k <= x; (long)k * k >= x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans <= k && k <= x; (long)k * k >= x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans <= k && k <= x; (long)k * k + 1 >= x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans <= k && k <= x; (long)k * k + 1 >= x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans <= k && k - 1 <= x; (long)k * k > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans <= k && k - 1 <= x; (long)k * k > x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans <= k && k - 1 <= x; (long)k * k >= x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans <= k && k - 1 <= x; (long)k * k >= x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\forall int k; ans <= k && k - 1 <= x; (long)k * k + 1 >= x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
/root/specgen/SpecGen/project/081401-specgen/tmp/MySqrt_Mutant4.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method mySqrt
        //@ maintaining (\forall int k; ans <= k && k - 1 <= x; (long)k * k + 1 >= x);  
            ^
1 verification failure

==============================
public class MySqrt_Mutant4 {
    //@ requires x >= 0;
    //@ ensures \result >= 0;
    //@ ensures (\result * \result) <= x;
    //@ ensures (\result + 1) * (\result + 1) > x || x == Integer.MAX_VALUE;
    public static int mySqrt(int x) {
        int l = 0, r = x, ans = -1;
        //@ maintaining 0 <= l && l <= r + 1;
        //@ maintaining r <= x;
        //@ maintaining ans >= -1 && ans <= x;
        //@ maintaining (\forall int k; 0 <= k && k < ans; (long)k * k < x);
        //@ maintaining (\exists int k; ans < k && k < x; (long)k * k > x);  
        //@ decreases r - l;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if ((long) mid * mid < x) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}

==============================
error: An error while executing a proof script for mySqrt: (error "Solver has unexpectedly terminated")
1 error

==============================
